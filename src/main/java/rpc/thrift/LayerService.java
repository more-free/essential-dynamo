/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rpc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LayerService {

    public interface Iface {

        public void put(String key, Versioned versioned) throws org.apache.thrift.TException;

        public List<Versioned> get(String key) throws org.apache.thrift.TException;

        public void hintedHandoff(String key, Versioned versioned, Node origin) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void put(String key, Versioned versioned, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void get(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void hintedHandoff(String key, Versioned versioned, Node origin, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void put(String key, Versioned versioned) throws org.apache.thrift.TException
        {
            send_put(key, versioned);
            recv_put();
        }

        public void send_put(String key, Versioned versioned) throws org.apache.thrift.TException
        {
            put_args args = new put_args();
            args.setKey(key);
            args.setVersioned(versioned);
            sendBase("put", args);
        }

        public void recv_put() throws org.apache.thrift.TException
        {
            put_result result = new put_result();
            receiveBase(result, "put");
            return;
        }

        public List<Versioned> get(String key) throws org.apache.thrift.TException
        {
            send_get(key);
            return recv_get();
        }

        public void send_get(String key) throws org.apache.thrift.TException
        {
            get_args args = new get_args();
            args.setKey(key);
            sendBase("get", args);
        }

        public List<Versioned> recv_get() throws org.apache.thrift.TException
        {
            get_result result = new get_result();
            receiveBase(result, "get");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
        }

        public void hintedHandoff(String key, Versioned versioned, Node origin) throws org.apache.thrift.TException
        {
            send_hintedHandoff(key, versioned, origin);
            recv_hintedHandoff();
        }

        public void send_hintedHandoff(String key, Versioned versioned, Node origin) throws org.apache.thrift.TException
        {
            hintedHandoff_args args = new hintedHandoff_args();
            args.setKey(key);
            args.setVersioned(versioned);
            args.setOrigin(origin);
            sendBase("hintedHandoff", args);
        }

        public void recv_hintedHandoff() throws org.apache.thrift.TException
        {
            hintedHandoff_result result = new hintedHandoff_result();
            receiveBase(result, "hintedHandoff");
            return;
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void put(String key, Versioned versioned, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            put_call method_call = new put_call(key, versioned, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class put_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String key;
            private Versioned versioned;
            public put_call(String key, Versioned versioned, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.key = key;
                this.versioned = versioned;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put", org.apache.thrift.protocol.TMessageType.CALL, 0));
                put_args args = new put_args();
                args.setKey(key);
                args.setVersioned(versioned);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_put();
            }
        }

        public void get(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            get_call method_call = new get_call(key, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class get_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String key;
            public get_call(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.key = key;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.CALL, 0));
                get_args args = new get_args();
                args.setKey(key);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Versioned> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_get();
            }
        }

        public void hintedHandoff(String key, Versioned versioned, Node origin, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hintedHandoff_call method_call = new hintedHandoff_call(key, versioned, origin, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hintedHandoff_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String key;
            private Versioned versioned;
            private Node origin;
            public hintedHandoff_call(String key, Versioned versioned, Node origin, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.key = key;
                this.versioned = versioned;
                this.origin = origin;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hintedHandoff", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hintedHandoff_args args = new hintedHandoff_args();
                args.setKey(key);
                args.setVersioned(versioned);
                args.setOrigin(origin);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_hintedHandoff();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("put", new put());
            processMap.put("get", new get());
            processMap.put("hintedHandoff", new hintedHandoff());
            return processMap;
        }

        public static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
            public put() {
                super("put");
            }

            public put_args getEmptyArgsInstance() {
                return new put_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
                put_result result = new put_result();
                iface.put(args.key, args.versioned);
                return result;
            }
        }

        public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
            public get() {
                super("get");
            }

            public get_args getEmptyArgsInstance() {
                return new get_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
                get_result result = new get_result();
                result.success = iface.get(args.key);
                return result;
            }
        }

        public static class hintedHandoff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hintedHandoff_args> {
            public hintedHandoff() {
                super("hintedHandoff");
            }

            public hintedHandoff_args getEmptyArgsInstance() {
                return new hintedHandoff_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hintedHandoff_result getResult(I iface, hintedHandoff_args args) throws org.apache.thrift.TException {
                hintedHandoff_result result = new hintedHandoff_result();
                iface.hintedHandoff(args.key, args.versioned, args.origin);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("put", new put());
            processMap.put("get", new get());
            processMap.put("hintedHandoff", new hintedHandoff());
            return processMap;
        }

        public static class put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put_args, Void> {
            public put() {
                super("put");
            }

            public put_args getEmptyArgsInstance() {
                return new put_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        put_result result = new put_result();
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        put_result result = new put_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, put_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.put(args.key, args.versioned,resultHandler);
            }
        }

        public static class get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_args, List<Versioned>> {
            public get() {
                super("get");
            }

            public get_args getEmptyArgsInstance() {
                return new get_args();
            }

            public AsyncMethodCallback<List<Versioned>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Versioned>>() {
                    public void onComplete(List<Versioned> o) {
                        get_result result = new get_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        get_result result = new get_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, get_args args, org.apache.thrift.async.AsyncMethodCallback<List<Versioned>> resultHandler) throws TException {
                iface.get(args.key,resultHandler);
            }
        }

        public static class hintedHandoff<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hintedHandoff_args, Void> {
            public hintedHandoff() {
                super("hintedHandoff");
            }

            public hintedHandoff_args getEmptyArgsInstance() {
                return new hintedHandoff_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        hintedHandoff_result result = new hintedHandoff_result();
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        hintedHandoff_result result = new hintedHandoff_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hintedHandoff_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.hintedHandoff(args.key, args.versioned, args.origin,resultHandler);
            }
        }

    }

    public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_args");

        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField VERSIONED_FIELD_DESC = new org.apache.thrift.protocol.TField("versioned", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new put_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new put_argsTupleSchemeFactory());
        }

        public String key; // required
        public Versioned versioned; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            KEY((short)1, "key"),
            VERSIONED((short)2, "versioned");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // KEY
                        return KEY;
                    case 2: // VERSIONED
                        return VERSIONED;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VERSIONED, new org.apache.thrift.meta_data.FieldMetaData("versioned", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Versioned.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
        }

        public put_args() {
        }

        public put_args(
                String key,
                Versioned versioned)
        {
            this();
            this.key = key;
            this.versioned = versioned;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public put_args(put_args other) {
            if (other.isSetKey()) {
                this.key = other.key;
            }
            if (other.isSetVersioned()) {
                this.versioned = new Versioned(other.versioned);
            }
        }

        public put_args deepCopy() {
            return new put_args(this);
        }

        @Override
        public void clear() {
            this.key = null;
            this.versioned = null;
        }

        public String getKey() {
            return this.key;
        }

        public put_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public Versioned getVersioned() {
            return this.versioned;
        }

        public put_args setVersioned(Versioned versioned) {
            this.versioned = versioned;
            return this;
        }

        public void unsetVersioned() {
            this.versioned = null;
        }

        /** Returns true if field versioned is set (has been assigned a value) and false otherwise */
        public boolean isSetVersioned() {
            return this.versioned != null;
        }

        public void setVersionedIsSet(boolean value) {
            if (!value) {
                this.versioned = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((String)value);
                    }
                    break;

                case VERSIONED:
                    if (value == null) {
                        unsetVersioned();
                    } else {
                        setVersioned((Versioned)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case KEY:
                    return getKey();

                case VERSIONED:
                    return getVersioned();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case KEY:
                    return isSetKey();
                case VERSIONED:
                    return isSetVersioned();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof put_args)
                return this.equals((put_args)that);
            return false;
        }

        public boolean equals(put_args that) {
            if (that == null)
                return false;

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_versioned = true && this.isSetVersioned();
            boolean that_present_versioned = true && that.isSetVersioned();
            if (this_present_versioned || that_present_versioned) {
                if (!(this_present_versioned && that_present_versioned))
                    return false;
                if (!this.versioned.equals(that.versioned))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(put_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetVersioned()).compareTo(other.isSetVersioned());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetVersioned()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versioned, other.versioned);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("put_args(");
            boolean first = true;

            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("versioned:");
            if (this.versioned == null) {
                sb.append("null");
            } else {
                sb.append(this.versioned);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (versioned != null) {
                versioned.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class put_argsStandardSchemeFactory implements SchemeFactory {
            public put_argsStandardScheme getScheme() {
                return new put_argsStandardScheme();
            }
        }

        private static class put_argsStandardScheme extends StandardScheme<put_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, put_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // VERSIONED
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.versioned = new Versioned();
                                struct.versioned.read(iprot);
                                struct.setVersionedIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, put_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                if (struct.versioned != null) {
                    oprot.writeFieldBegin(VERSIONED_FIELD_DESC);
                    struct.versioned.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class put_argsTupleSchemeFactory implements SchemeFactory {
            public put_argsTupleScheme getScheme() {
                return new put_argsTupleScheme();
            }
        }

        private static class put_argsTupleScheme extends TupleScheme<put_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetKey()) {
                    optionals.set(0);
                }
                if (struct.isSetVersioned()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetVersioned()) {
                    struct.versioned.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.versioned = new Versioned();
                    struct.versioned.read(iprot);
                    struct.setVersionedIsSet(true);
                }
            }
        }

    }

    public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable, Comparable<put_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new put_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new put_resultTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
        }

        public put_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public put_result(put_result other) {
        }

        public put_result deepCopy() {
            return new put_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof put_result)
                return this.equals((put_result)that);
            return false;
        }

        public boolean equals(put_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(put_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("put_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class put_resultStandardSchemeFactory implements SchemeFactory {
            public put_resultStandardScheme getScheme() {
                return new put_resultStandardScheme();
            }
        }

        private static class put_resultStandardScheme extends StandardScheme<put_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, put_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, put_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class put_resultTupleSchemeFactory implements SchemeFactory {
            public put_resultTupleScheme getScheme() {
                return new put_resultTupleScheme();
            }
        }

        private static class put_resultTupleScheme extends TupleScheme<put_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");

        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new get_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new get_argsTupleSchemeFactory());
        }

        public String key; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            KEY((short)1, "key");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // KEY
                        return KEY;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
        }

        public get_args() {
        }

        public get_args(
                String key)
        {
            this();
            this.key = key;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public get_args(get_args other) {
            if (other.isSetKey()) {
                this.key = other.key;
            }
        }

        public get_args deepCopy() {
            return new get_args(this);
        }

        @Override
        public void clear() {
            this.key = null;
        }

        public String getKey() {
            return this.key;
        }

        public get_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((String)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case KEY:
                    return getKey();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case KEY:
                    return isSetKey();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof get_args)
                return this.equals((get_args)that);
            return false;
        }

        public boolean equals(get_args that) {
            if (that == null)
                return false;

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(get_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("get_args(");
            boolean first = true;

            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class get_argsStandardSchemeFactory implements SchemeFactory {
            public get_argsStandardScheme getScheme() {
                return new get_argsStandardScheme();
            }
        }

        private static class get_argsStandardScheme extends StandardScheme<get_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class get_argsTupleSchemeFactory implements SchemeFactory {
            public get_argsTupleScheme getScheme() {
                return new get_argsTupleScheme();
            }
        }

        private static class get_argsTupleScheme extends TupleScheme<get_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetKey()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
            }
        }

    }

    public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new get_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new get_resultTupleSchemeFactory());
        }

        public List<Versioned> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Versioned.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
        }

        public get_result() {
        }

        public get_result(
                List<Versioned> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public get_result(get_result other) {
            if (other.isSetSuccess()) {
                List<Versioned> __this__success = new ArrayList<Versioned>(other.success.size());
                for (Versioned other_element : other.success) {
                    __this__success.add(new Versioned(other_element));
                }
                this.success = __this__success;
            }
        }

        public get_result deepCopy() {
            return new get_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Versioned> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(Versioned elem) {
            if (this.success == null) {
                this.success = new ArrayList<Versioned>();
            }
            this.success.add(elem);
        }

        public List<Versioned> getSuccess() {
            return this.success;
        }

        public get_result setSuccess(List<Versioned> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Versioned>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof get_result)
                return this.equals((get_result)that);
            return false;
        }

        public boolean equals(get_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(get_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("get_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class get_resultStandardSchemeFactory implements SchemeFactory {
            public get_resultStandardScheme getScheme() {
                return new get_resultStandardScheme();
            }
        }

        private static class get_resultStandardScheme extends StandardScheme<get_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new ArrayList<Versioned>(_list0.size);
                                    for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                                    {
                                        Versioned _elem2;
                                        _elem2 = new Versioned();
                                        _elem2.read(iprot);
                                        struct.success.add(_elem2);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Versioned _iter3 : struct.success)
                        {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class get_resultTupleSchemeFactory implements SchemeFactory {
            public get_resultTupleScheme getScheme() {
                return new get_resultTupleScheme();
            }
        }

        private static class get_resultTupleScheme extends TupleScheme<get_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Versioned _iter4 : struct.success)
                        {
                            _iter4.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<Versioned>(_list5.size);
                        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
                        {
                            Versioned _elem7;
                            _elem7 = new Versioned();
                            _elem7.read(iprot);
                            struct.success.add(_elem7);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class hintedHandoff_args implements org.apache.thrift.TBase<hintedHandoff_args, hintedHandoff_args._Fields>, java.io.Serializable, Cloneable, Comparable<hintedHandoff_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hintedHandoff_args");

        private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField VERSIONED_FIELD_DESC = new org.apache.thrift.protocol.TField("versioned", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRUCT, (short)3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new hintedHandoff_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new hintedHandoff_argsTupleSchemeFactory());
        }

        public String key; // required
        public Versioned versioned; // required
        public Node origin; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            KEY((short)1, "key"),
            VERSIONED((short)2, "versioned"),
            ORIGIN((short)3, "origin");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // KEY
                        return KEY;
                    case 2: // VERSIONED
                        return VERSIONED;
                    case 3: // ORIGIN
                        return ORIGIN;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VERSIONED, new org.apache.thrift.meta_data.FieldMetaData("versioned", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Versioned.class)));
            tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hintedHandoff_args.class, metaDataMap);
        }

        public hintedHandoff_args() {
        }

        public hintedHandoff_args(
                String key,
                Versioned versioned,
                Node origin)
        {
            this();
            this.key = key;
            this.versioned = versioned;
            this.origin = origin;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hintedHandoff_args(hintedHandoff_args other) {
            if (other.isSetKey()) {
                this.key = other.key;
            }
            if (other.isSetVersioned()) {
                this.versioned = new Versioned(other.versioned);
            }
            if (other.isSetOrigin()) {
                this.origin = new Node(other.origin);
            }
        }

        public hintedHandoff_args deepCopy() {
            return new hintedHandoff_args(this);
        }

        @Override
        public void clear() {
            this.key = null;
            this.versioned = null;
            this.origin = null;
        }

        public String getKey() {
            return this.key;
        }

        public hintedHandoff_args setKey(String key) {
            this.key = key;
            return this;
        }

        public void unsetKey() {
            this.key = null;
        }

        /** Returns true if field key is set (has been assigned a value) and false otherwise */
        public boolean isSetKey() {
            return this.key != null;
        }

        public void setKeyIsSet(boolean value) {
            if (!value) {
                this.key = null;
            }
        }

        public Versioned getVersioned() {
            return this.versioned;
        }

        public hintedHandoff_args setVersioned(Versioned versioned) {
            this.versioned = versioned;
            return this;
        }

        public void unsetVersioned() {
            this.versioned = null;
        }

        /** Returns true if field versioned is set (has been assigned a value) and false otherwise */
        public boolean isSetVersioned() {
            return this.versioned != null;
        }

        public void setVersionedIsSet(boolean value) {
            if (!value) {
                this.versioned = null;
            }
        }

        public Node getOrigin() {
            return this.origin;
        }

        public hintedHandoff_args setOrigin(Node origin) {
            this.origin = origin;
            return this;
        }

        public void unsetOrigin() {
            this.origin = null;
        }

        /** Returns true if field origin is set (has been assigned a value) and false otherwise */
        public boolean isSetOrigin() {
            return this.origin != null;
        }

        public void setOriginIsSet(boolean value) {
            if (!value) {
                this.origin = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case KEY:
                    if (value == null) {
                        unsetKey();
                    } else {
                        setKey((String)value);
                    }
                    break;

                case VERSIONED:
                    if (value == null) {
                        unsetVersioned();
                    } else {
                        setVersioned((Versioned)value);
                    }
                    break;

                case ORIGIN:
                    if (value == null) {
                        unsetOrigin();
                    } else {
                        setOrigin((Node)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case KEY:
                    return getKey();

                case VERSIONED:
                    return getVersioned();

                case ORIGIN:
                    return getOrigin();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case KEY:
                    return isSetKey();
                case VERSIONED:
                    return isSetVersioned();
                case ORIGIN:
                    return isSetOrigin();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof hintedHandoff_args)
                return this.equals((hintedHandoff_args)that);
            return false;
        }

        public boolean equals(hintedHandoff_args that) {
            if (that == null)
                return false;

            boolean this_present_key = true && this.isSetKey();
            boolean that_present_key = true && that.isSetKey();
            if (this_present_key || that_present_key) {
                if (!(this_present_key && that_present_key))
                    return false;
                if (!this.key.equals(that.key))
                    return false;
            }

            boolean this_present_versioned = true && this.isSetVersioned();
            boolean that_present_versioned = true && that.isSetVersioned();
            if (this_present_versioned || that_present_versioned) {
                if (!(this_present_versioned && that_present_versioned))
                    return false;
                if (!this.versioned.equals(that.versioned))
                    return false;
            }

            boolean this_present_origin = true && this.isSetOrigin();
            boolean that_present_origin = true && that.isSetOrigin();
            if (this_present_origin || that_present_origin) {
                if (!(this_present_origin && that_present_origin))
                    return false;
                if (!this.origin.equals(that.origin))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(hintedHandoff_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetKey()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetVersioned()).compareTo(other.isSetVersioned());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetVersioned()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versioned, other.versioned);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOrigin()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("hintedHandoff_args(");
            boolean first = true;

            sb.append("key:");
            if (this.key == null) {
                sb.append("null");
            } else {
                sb.append(this.key);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("versioned:");
            if (this.versioned == null) {
                sb.append("null");
            } else {
                sb.append(this.versioned);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("origin:");
            if (this.origin == null) {
                sb.append("null");
            } else {
                sb.append(this.origin);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (versioned != null) {
                versioned.validate();
            }
            if (origin != null) {
                origin.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hintedHandoff_argsStandardSchemeFactory implements SchemeFactory {
            public hintedHandoff_argsStandardScheme getScheme() {
                return new hintedHandoff_argsStandardScheme();
            }
        }

        private static class hintedHandoff_argsStandardScheme extends StandardScheme<hintedHandoff_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hintedHandoff_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // KEY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.key = iprot.readString();
                                struct.setKeyIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // VERSIONED
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.versioned = new Versioned();
                                struct.versioned.read(iprot);
                                struct.setVersionedIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // ORIGIN
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.origin = new Node();
                                struct.origin.read(iprot);
                                struct.setOriginIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hintedHandoff_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.key != null) {
                    oprot.writeFieldBegin(KEY_FIELD_DESC);
                    oprot.writeString(struct.key);
                    oprot.writeFieldEnd();
                }
                if (struct.versioned != null) {
                    oprot.writeFieldBegin(VERSIONED_FIELD_DESC);
                    struct.versioned.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.origin != null) {
                    oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
                    struct.origin.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hintedHandoff_argsTupleSchemeFactory implements SchemeFactory {
            public hintedHandoff_argsTupleScheme getScheme() {
                return new hintedHandoff_argsTupleScheme();
            }
        }

        private static class hintedHandoff_argsTupleScheme extends TupleScheme<hintedHandoff_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hintedHandoff_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetKey()) {
                    optionals.set(0);
                }
                if (struct.isSetVersioned()) {
                    optionals.set(1);
                }
                if (struct.isSetOrigin()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetKey()) {
                    oprot.writeString(struct.key);
                }
                if (struct.isSetVersioned()) {
                    struct.versioned.write(oprot);
                }
                if (struct.isSetOrigin()) {
                    struct.origin.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hintedHandoff_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.key = iprot.readString();
                    struct.setKeyIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.versioned = new Versioned();
                    struct.versioned.read(iprot);
                    struct.setVersionedIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.origin = new Node();
                    struct.origin.read(iprot);
                    struct.setOriginIsSet(true);
                }
            }
        }

    }

    public static class hintedHandoff_result implements org.apache.thrift.TBase<hintedHandoff_result, hintedHandoff_result._Fields>, java.io.Serializable, Cloneable, Comparable<hintedHandoff_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hintedHandoff_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new hintedHandoff_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new hintedHandoff_resultTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hintedHandoff_result.class, metaDataMap);
        }

        public hintedHandoff_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hintedHandoff_result(hintedHandoff_result other) {
        }

        public hintedHandoff_result deepCopy() {
            return new hintedHandoff_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof hintedHandoff_result)
                return this.equals((hintedHandoff_result)that);
            return false;
        }

        public boolean equals(hintedHandoff_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(hintedHandoff_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("hintedHandoff_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hintedHandoff_resultStandardSchemeFactory implements SchemeFactory {
            public hintedHandoff_resultStandardScheme getScheme() {
                return new hintedHandoff_resultStandardScheme();
            }
        }

        private static class hintedHandoff_resultStandardScheme extends StandardScheme<hintedHandoff_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hintedHandoff_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hintedHandoff_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hintedHandoff_resultTupleSchemeFactory implements SchemeFactory {
            public hintedHandoff_resultTupleScheme getScheme() {
                return new hintedHandoff_resultTupleScheme();
            }
        }

        private static class hintedHandoff_resultTupleScheme extends TupleScheme<hintedHandoff_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hintedHandoff_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hintedHandoff_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

}
